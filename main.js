// main.js - Main p5.js sketch using modules

// Import visualization modules
import FlowerVisualization from './flower.js';
import LorenzVisualization from './lorenz.js';
// Import other visualizations here later
// import LissajousVisualization from './lissajous.js'; // Example

const sketch = (p) => {

    // --- Global State ---
    let currentVizKey = 'about';
    let animateViz = false;
    let animationSpeed = 1.0;
    let visualizations = {}; // Object to hold instances

    // --- DOM References ---
    let vizSelect, animateCheckbox, animSpeedSlider, animSpeedValSpan,
        vizNameSpan, vizFormulaHeaderSpan, titleContainer, animationControlsDiv,
        explanationContainerDiv, specificControlsContainer;

    // --- *** ADD BACK FULL EXPLANATIONS OBJECT *** ---
    const explanations = {
        about: "",
        flower: `<h3>Polar Flower (Rose Curve)</h3>
                 <p>This shape is generated by a polar equation where the distance from the center (radius, <code>r</code>) depends on the angle (<code>&theta;</code>). The formula shown is a common way to generate flower-like patterns.</p>
                 <p><strong>Parameters:</strong></p>
                 <ul>
                    <li><span class="variable">a</span> (Amplitude): Controls the overall size of the petals.</li>
                    <li><span class="variable">k</span> (Petal Factor): Determines the number and shape of petals. If <span class="variable">k</span> is an integer, the flower has <span class="variable">k</span> petals (if <span class="variable">k</span> is odd) or 2<span class="variable">k</span> petals (if <span class="variable">k</span> is even). If <span class="variable">k</span> is non-integer, more complex patterns emerge.</li>
                 </ul>`,
        lorenz: `<h3>Lorenz Attractor</h3>
                 <p>This is a famous example of a <strong>dynamic system</strong> exhibiting chaotic behavior, first described by Edward Lorenz in 1963. It arises from a simplified model of atmospheric convection.</p>
                 <p>The visualization shows the path (or trajectory) of the system's state over time in a 3D space (represented here by a 2D projection). Even though the governing equations are simple and deterministic (no randomness), the path is highly sensitive to the starting point (the "butterfly effect") and never exactly repeats, tracing out a complex, fractal structure known as a <strong>strange attractor</strong>.</p>
                 <p><strong>Why it matters:</strong> The Lorenz system was seminal in the development of <strong>chaos theory</strong>. It demonstrated how complex, unpredictable behavior can emerge from simple, non-linear deterministic rules, impacting fields from weather prediction to biology and economics.</p>
                 <p><strong>Parameters:</strong></p>
                 <ul>
                    <li><span class="variable">&sigma;</span> (Sigma): Related to fluid viscosity and thermal diffusivity (Prandtl number). Affects the shape and contraction rate of the attractor. The classic value is 10.</li>
                    <li><span class="variable">&rho;</span> (Rho): Related to the temperature difference driving the convection (Rayleigh number). This is the primary control parameter for chaotic behavior. As <span class="variable">&rho;</span> increases past certain thresholds, the system goes from stable points to loops, and eventually (around <span class="variable">&rho;</span> > 24.74) to the classic chaotic attractor. Classic value is 28.</li>
                    <li><span class="variable">&beta;</span> (Beta): Related to the physical dimensions of the convection layer. Influences the shape and stability. Classic value is 8/3.</li>
                    <li><code>Points</code>: The number of steps calculated and drawn for the trajectory. More points show more detail but take longer.</li>
                    <li><code>Time Step (dt)</code>: The size of the time increment used in the calculation (Euler method). Smaller values are more accurate but slower; larger values can be faster but less accurate or even unstable.</li>
                 </ul>`,
         // Add explanations for future viz here
         // lissajous: `<h3>Lissajous Curves</h3>...`
    };
     // Define these maps here as well, ensuring consistency
     const vizDisplayNames = { about: "About", flower: "Polar Flower", lorenz: "Lorenz Attractor" /*, lissajous: "Lissajous Curves" */};
     const formulas = { about: `Select a visualization...`, flower: `r = <span class="variable">a</span> &sdot; cos(<span class="variable">k</span> &sdot; &theta;)`, lorenz: `dx/dt = &sigma;(y-x), dy/dt = x(&rho;-z)-y, dz/dt = xy-&beta;z <span class='comment'>(2D Projection)</span>` /*, lissajous: `x = A&sdot;sin(a&sdot;t + &delta;), y = B&sdot;sin(b&sdot;t)`*/ };


    p.setup = () => {
        console.log("Main setup running...");
        let canvasContainer = p.select('#canvasContainer');
        let controlsContainer = p.select('#controls');
        titleContainer = p.select('#vizTitleContainer');
        let availableWidth = p.windowWidth - (controlsContainer ? controlsContainer.width : 300) - 60;
        let canvasWidth = Math.max(400, availableWidth);
        let availableHeight = p.windowHeight - (titleContainer ? titleContainer.height : 50) - 80;
        let canvasHeight = Math.min(500, availableHeight);
        let canvas = p.createCanvas(canvasWidth, canvasHeight);
        canvas.parent('canvasContainer');

        // Get General DOM elements (Ensure these are correct)
        vizSelect = p.select('#vizSelect');
        animateCheckbox = p.select('#animateCheck');
        animSpeedSlider = p.select('#animSpeed');
        animSpeedValSpan = p.select('#animSpeedVal');
        vizNameSpan = p.select('#vizName');
        vizFormulaHeaderSpan = p.select('#vizFormulaHeader');
        animationControlsDiv = p.select('.animation-controls');
        explanationContainerDiv = p.select('#explanationContainer');
        specificControlsContainer = p.select('#specificControlsContainer');

        // Instantiate Visualization Modules
        visualizations = {}; // Clear first in case of hot-reload issues
        try {
             visualizations['flower'] = new FlowerVisualization(p, p.select('#flowerControls'));
             visualizations['lorenz'] = new LorenzVisualization(p, p.select('#lorenzControls'));
             // visualizations['lissajous'] = new LissajousVisualization(p, p.select('#lissajousControls')); // Example if added back
             console.log("Visualization modules instantiated:", Object.keys(visualizations));
        } catch (e) { console.error("Error instantiating visualization modules:", e); }

        // Attach Listeners to General Controls
        const addListener = (selector, event, handler) => { const elem = p.select(selector); if (elem) { elem[event](handler); } else { console.warn(`Element not found: ${selector}`); }};
        if (vizSelect) { vizSelect.changed(visualizationChanged); console.log("Dropdown listener attached."); } else { console.error("Could not find #vizSelect!"); }
        addListener('#animateCheck', 'changed', updateGeneralParams);
        addListener('#animSpeed', 'input', updateGeneralParams);

        // Initial UI setup
        currentVizKey = vizSelect.value();
        updateGeneralParams();
        visualizationChanged(); // Setup UI for initial viz

        p.angleMode(p.DEGREES); p.colorMode(p.HSB, 360, 100, 100, 1);
        console.log("Main setup complete.");
    };

    p.draw = () => {
        p.background(0);

        // Sanity check dot
        p.push(); p.fill(0, 100, 100); p.noStroke(); p.ellipse(30, 30, 20, 20); p.pop();

        // Get the active visualization object
        const activeViz = visualizations[currentVizKey];

        if (activeViz && typeof activeViz.draw === 'function') {
            // *** FIX: Apply centering translate for 2D visualizations ***
            const is2D = (currentVizKey === 'flower' || currentVizKey === 'lissajous'); // Add other 2D keys here
            if (is2D) {
                p.push(); // Isolate transform for 2D viz
                p.translate(p.width / 2, p.height / 2);
            }

            // Pass necessary shared state to the draw method
            activeViz.draw({
                animate: animateViz,
                speed: animationSpeed
            });

            if (is2D) {
                p.pop(); // Restore transform
            }

        } else if (currentVizKey === 'about') {
            p.push(); p.fill(0, 0, 80); p.textAlign(p.CENTER, p.CENTER); p.textSize(18);
            p.text("Select a visualization.", p.width / 2, p.height / 2);
            p.pop();
        } else {
             console.warn("No active drawing function found for:", currentVizKey);
             p.push(); p.fill(255,0,100); p.textAlign(p.CENTER, p.CENTER); p.textSize(18);
             p.text(`Error: Viz "${currentVizKey}" not found.`, p.width / 2, p.height / 2);
             p.pop();
        }
    };

    // Handles changes to GENERAL controls
    function updateGeneralParams() { /* ... (Identical to previous version) ... */
        if (animateCheckbox) animateViz = animateCheckbox.checked();
        if (animSpeedSlider) animationSpeed = parseFloat(animSpeedSlider.value());
        if (animSpeedValSpan) animSpeedValSpan.html(animationSpeed.toFixed(1));
        const activeViz = visualizations[currentVizKey];
        if (activeViz?.isAnimatable ? activeViz.isAnimatable() : false) { p.redraw(); }
     }

    // Handles Dropdown Change
    function visualizationChanged() { // Added fix for explanation display
        if (!vizSelect) return;
        const newVizKey = vizSelect.value();
        console.log("Viz Changed Event. Selected:", newVizKey);
        currentVizKey = newVizKey;

        const activeViz = visualizations[currentVizKey];
        const displayName = activeViz?.getDisplayName ? activeViz.getDisplayName() : (currentVizKey === 'about' ? "About" : "Unknown");
        const formulaHTML = activeViz?.getFormula ? activeViz.getFormula() : (currentVizKey === 'about' ? "Select a visualization..." : "");

        // Update Header
        if (vizNameSpan) vizNameSpan.html(displayName);
        if (vizFormulaHeaderSpan) vizFormulaHeaderSpan.html(formulaHTML);
        if (titleContainer) { titleContainer.style('display', currentVizKey === 'about' ? 'none' : 'block'); }

        // Update Explanation
        const explanationHTML = activeViz?.getExplanation ? activeViz.getExplanation() : (currentVizKey === 'about' ? explanations['about'] : ""); // Ensure 'about' gets its text (empty string)
        if (explanationContainerDiv) {
             try {
                 // *** Use elt.innerHTML to render HTML tags ***
                 explanationContainerDiv.elt.innerHTML = explanationHTML;
                 explanationContainerDiv.style('display', (currentVizKey === 'about' || !explanationHTML) ? 'none' : 'block');
             } catch (e) { console.error("Error setting explanation HTML:", e); explanationContainerDiv.elt.innerText = "Error loading explanation."; explanationContainerDiv.style('display', 'block'); }
        } else { console.warn("Explanation container not found"); }

        // Hide/Show Animation Controls
        const showAnim = activeViz?.isAnimatable ? activeViz.isAnimatable() : false;
        if (animationControlsDiv) { animationControlsDiv.style('display', showAnim ? 'block' : 'none'); }
        if (!showAnim && animateCheckbox) { animateCheckbox.checked(false); animateViz = false; }

        // Activate/Deactivate Specific Controls
        for (const key in visualizations) { if(visualizations[key].hideControls) visualizations[key].hideControls(); } // Hide all
        if (activeViz && typeof activeViz.showControls === 'function') { // Show active one
            activeViz.showControls();
             if(typeof activeViz.activate === 'function') { activeViz.activate(); } // Activate if needed
        } else if (currentVizKey !== 'about') { console.warn("No controls found/show method for:", currentVizKey); }

        p.redraw();
    }

}; // End sketch function wrapper

// Create the main p5 instance
new p5(sketch);